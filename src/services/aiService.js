const { GoogleGenerativeAI } = require('@google/generative-ai');

class AIService {
  constructor() {
    this.apiKey = process.env.GOOGLE_AI_API_KEY;
    this.genAI = null;
    this.model = null;
    this.isInitialized = false;
    
    this.initialize();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–∞
   */
  initialize() {
    try {
      if (!this.apiKey) {
        throw new Error('GOOGLE_AI_API_KEY not found in environment variables');
      }

      this.genAI = new GoogleGenerativeAI(this.apiKey);
      this.model = this.genAI.getGenerativeModel({ model: 'gemini-2.0-flash-exp' });
      this.isInitialized = true;
      
      console.log('üß† AI Service initialized successfully');
    } catch (error) {
      console.error('‚ùå Failed to initialize AI Service:', error);
      this.isInitialized = false;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò
   * @param {string} prompt - –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Array} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns {Promise<string>} - –û—Ç–≤–µ—Ç –æ—Ç –ò–ò
   */
  async generateResponse(prompt, context = []) {
    try {
      if (!this.isInitialized) {
        throw new Error('AI Service not initialized');
      }

      if (!prompt || typeof prompt !== 'string') {
        throw new Error('Invalid prompt provided');
      }

      console.log('ü§î Generating AI response for prompt:', prompt.substring(0, 100) + '...');

      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏
      let fullPrompt = prompt;
      
      if (context && context.length > 0) {
        const contextString = this.formatContext(context);
        fullPrompt = `${contextString}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${prompt}`;
      }

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const generationConfig = {
        temperature: 0.7,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 1024,
      };

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
      const result = await this.model.generateContent({
        contents: [{ role: 'user', parts: [{ text: fullPrompt }] }],
        generationConfig,
      });

      const response = await result.response;
      const text = response.text();

      if (!text) {
        throw new Error('Empty response from AI model');
      }

      console.log('‚úÖ AI response generated successfully:', {
        promptLength: prompt.length,
        responseLength: text.length,
        hasContext: context.length > 0
      });

      return text;

    } catch (error) {
      console.error('‚ùå Error generating AI response:', error);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
      if (error.message.includes('quota') || error.message.includes('limit')) {
        throw new Error('AI_QUOTA_EXCEEDED');
      } else if (error.message.includes('API key')) {
        throw new Error('AI_INVALID_KEY');
      } else if (error.message.includes('network') || error.message.includes('timeout')) {
        throw new Error('AI_NETWORK_ERROR');
      } else {
        throw new Error('AI_GENERAL_ERROR');
      }
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏
   * @param {Array} context - –ú–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
   */
  formatContext(context) {
    if (!context || context.length === 0) {
      return '';
    }

    const contextMessages = context
      .slice(-10) // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
      .map(msg => {
        const role = msg.role === 'user' ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' : '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç';
        return `${role}: ${msg.content}`;
      })
      .join('\n');

    return `–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n${contextMessages}\n`;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI —Å–µ—Ä–≤–∏—Å–∞
   * @returns {Promise<boolean>} - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
   */
  async isAvailable() {
    try {
      if (!this.isInitialized) {
        return false;
      }

      // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
      const testResult = await this.model.generateContent({
        contents: [{ role: 'user', parts: [{ text: '–ü—Ä–∏–≤–µ—Ç' }] }],
        generationConfig: {
          temperature: 0.1,
          maxOutputTokens: 10,
        },
      });

      const response = await testResult.response;
      return !!response.text();

    } catch (error) {
      console.error('‚ö†Ô∏è AI Service availability check failed:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ AI —Å–µ—Ä–≤–∏—Å–∞
   * @returns {Object} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ
   */
  getStatus() {
    return {
      initialized: this.isInitialized,
      hasApiKey: !!this.apiKey,
      model: 'gemini-2.0-flash-exp',
      timestamp: new Date().toISOString()
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ fallback —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI
   * @param {string} errorType - –¢–∏–ø –æ—à–∏–±–∫–∏
   * @returns {string} - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  getFallbackMessage(errorType) {
    const messages = {
      'AI_QUOTA_EXCEEDED': '‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      'AI_INVALID_KEY': 'üîë –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–ª—é—á–æ–º –¥–æ—Å—Ç—É–ø–∞ –∫ –ò–ò. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
      'AI_NETWORK_ERROR': 'üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.',
      'AI_GENERAL_ERROR': 'ü§ñ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –ò–ò —Å–µ—Ä–≤–∏—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      'default': 'üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    };

    return messages[errorType] || messages['default'];
  }
}

module.exports = AIService;