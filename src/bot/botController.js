const TelegramBot = require('node-telegram-bot-api');
const AIService = require('../services/aiService');

class BotController {
  constructor() {
    this.bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN);
    this.aiService = new AIService();
    this.setupBot();
  }

  setupBot() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –±–µ–∑ polling (–∏—Å–ø–æ–ª—å–∑—É–µ–º webhook)
    console.log('ü§ñ Bot controller initialized');
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   */
  async handleWebhook(req, res) {
    try {
      const update = req.body;
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      if (!this.validateWebhook(update)) {
        console.warn('‚ö†Ô∏è Invalid webhook received:', update);
        return res.status(400).json({ error: 'Invalid webhook data' });
      }

      console.log('üì® Webhook received:', {
        updateId: update.update_id,
        messageId: update.message?.message_id,
        chatId: update.message?.chat?.id,
        hasMessage: !!update.message
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (update.message) {
        await this.processMessage(update.message);
      }

      res.status(200).json({ status: 'ok' });
    } catch (error) {
      console.error('‚ùå Error handling webhook:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è webhook –¥–∞–Ω–Ω—ã—Ö
   * @param {Object} update - Telegram update object
   * @returns {boolean}
   */
  validateWebhook(update) {
    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã webhook
    if (!update || typeof update !== 'object') {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ update_id
    if (!update.update_id || typeof update.update_id !== 'number') {
      return false;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if (update.message) {
      const message = update.message;
      if (!message.message_id || !message.chat || !message.chat.id) {
        return false;
      }
    }

    return true;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {Object} message - Telegram message object
   */
  async processMessage(message) {
    try {
      const chatId = message.chat.id;
      const userId = message.from.id;
      const text = message.text || '';
      const isCommand = text.startsWith('/');

      console.log('üí¨ Processing message:', {
        chatId,
        userId,
        text: text.substring(0, 50) + (text.length > 50 ? '...' : ''),
        isCommand
      });

      // –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–¥–∞—á–∞—Ö)
      if (isCommand) {
        await this.handleCommand(chatId, text);
      } else {
        await this.handleTextMessage(chatId, userId, text);
      }

    } catch (error) {
      console.error('‚ùå Error processing message:', error);
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await this.sendMessage(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ (–±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
   * @param {number} chatId - ID —á–∞—Ç–∞
   * @param {string} command - –ö–æ–º–∞–Ω–¥–∞
   */
  async handleCommand(chatId, command) {
    console.log('üîß Handling command:', command);
    
    switch (command.toLowerCase()) {
      case '/start':
        await this.sendMessage(chatId, 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!');
        break;
      case '/help':
        await this.sendMessage(chatId, `üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –°–ø—Ä–∞–≤–∫–∞
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É!`);
        break;
      case '/status':
        await this.handleStatusCommand(chatId);
        break;
      default:
        await this.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ò–ò
   * @param {number} chatId - ID —á–∞—Ç–∞
   * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async handleTextMessage(chatId, userId, text) {
    console.log('üí≠ Handling text message from user:', userId);
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
      await this.bot.sendChatAction(chatId, 'typing');
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò
      const aiResponse = await this.aiService.generateResponse(text);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await this.sendMessage(chatId, aiResponse);
      
    } catch (error) {
      console.error('‚ùå Error handling text message:', error);
      
      // –ü–æ–ª—É—á–∞–µ–º fallback —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
      const fallbackMessage = this.aiService.getFallbackMessage(error.message);
      await this.sendMessage(chatId, fallbackMessage);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
   * @param {number} chatId - ID —á–∞—Ç–∞
   * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
   */
  async sendMessage(chatId, text, options = {}) {
    try {
      const result = await this.bot.sendMessage(chatId, text, {
        parse_mode: 'HTML',
        ...options
      });
      
      console.log('‚úÖ Message sent:', {
        chatId,
        messageId: result.message_id,
        textLength: text.length
      });
      
      return result;
    } catch (error) {
      console.error('‚ùå Error sending message:', error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status
   * @param {number} chatId - ID —á–∞—Ç–∞
   */
  async handleStatusCommand(chatId) {
    try {
      const aiStatus = this.aiService.getStatus();
      const aiAvailable = await this.aiService.isAvailable();
      
      const statusMessage = `ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>

üß† <b>–ò–ò –°–µ—Ä–≤–∏—Å:</b> ${aiAvailable ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
üîß <b>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> ${aiStatus.initialized ? '‚úÖ OK' : '‚ùå –û—à–∏–±–∫–∞'}
üîë <b>API –ö–ª—é—á:</b> ${aiStatus.hasApiKey ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
ü§ñ <b>–ú–æ–¥–µ–ª—å:</b> ${aiStatus.model}

‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> ${new Date().toLocaleString('ru-RU')}`;

      await this.sendMessage(chatId, statusMessage);
    } catch (error) {
      console.error('‚ùå Error getting status:', error);
      await this.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞.');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
   */
  async getBotInfo() {
    try {
      const me = await this.bot.getMe();
      return me;
    } catch (error) {
      console.error('‚ùå Error getting bot info:', error);
      throw error;
    }
  }
}

module.exports = BotController;